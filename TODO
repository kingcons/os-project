**Brit's TODO
From highest priority to lowest...

2.
Read the assembly for a few jobs. Figure out intended behavior.
Ensure decoder faithfully implements said behavior. *sigh* What I wouldn't give for good docs.
Profiling still does nothing when enabled, finish it.
Test decode and fetch on job 1.
Test profiling.
Test scheduler changes.
Test kernel.

4. *Very Low Priority, Speculative*
Ensure correctness of MOV.

;; Watch lecture 01 again, ensure conformance to ideas about RQ/Scheduler + PCB?

Long Term/Fun:
Just make the code ungross.
Work on style, eliminate hacks, improve readability+formatting, etc.
-- Abstract things where possible. Use macros (read macros) where necessary/sane.
--- Potential targets:
---- Cpu.lisp is easily the ugliest code in the whole project.
----- Decode in particular is 120 lines of raw madness. Refactor, rewrite, sanify.

**Justin's TODO

1. OS Driver (or Kernel, aka Main Loop)

2. Documentation (Report)

3. Manually work out 3-4 jobs and check against OS output