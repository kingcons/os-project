**Brit's TODO
From highest priority to lowest...

ProjSpec1 talks about trapping attempted memory accesses outside each CPUs job. We can have a range slot that says what memory-range the CPU is allowed to play in and yell if it attempts to access something outside that. None of the instructions do, of course, so this would be bonus. But it would bea good opportunity to show off the conditions and restarts in CL.

Each CPU is allowed to have a cache equal to the size of the largest job (67, by my count). Then we'd have to handle each one of those...probably with sane threading semantics. Sounds retarded. What IO bottleneck does it actually save me from in real life again? Right. Nothing.

;; Dealing with profiling in parallel is going to suck.
We should know how\what we're profiling to do this.
-- opinion: Try to change semantics as little as possible. Let scheduler handle it.
-- ultimately, we're observing time spent from RQ to completion, right? or disk to completion?
-- or hitting cpu til completion? maybe # of IO calls.
-- let long-scheduler add start timestamps where appropriate, let move-job :save compute times.
-- that won't deal with IO but should handle the rest.

1.
Multi-cpu support is in but we need to experiment with profiling and ensure that all jobs are completing in parallel. Right now, all threads spawned on the initial run print to *standard-output* but it seems like only one thread prints to *standard-output* on subsequent runs (i.e. (reset) and (os-driver)). Hopefully, it's just an I/O and bindings issue and not a more serious threading/correctness issue.
2.
Start on phase 2 (paging).

Long Term/Fun:
Just make the code ungross.
Work on style, eliminate hacks, improve readability+formatting, etc.
-- Abstract things where possible. Use macros (read macros) where necessary/sane.
--- Potential targets:
---- Cpu.lisp is easily the ugliest code in the whole project.
----- Decode in particular is 120 lines of raw madness. Refactor, rewrite, sanify.

**Justin's TODO

1. OS Driver (or Kernel, aka Main Loop)

2. Documentation (Report)

3. Manually work out 3-4 jobs and check against OS output
